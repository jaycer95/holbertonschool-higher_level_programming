``add_integer()`` returns the product of its arguments.

Positive integers
=================
trying the sum of two integers

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 2)
	3

	>>> add_integer(2147483647, 0)
	2147483647


Negative integers
=================
tryng the sum of one/two negative integers

      >>> add_integer(100, -2)
      98
      >>> add_integer(-2147483648, 0)
      -2147483648
      >>> add_integer(2147483647, -2147483647)
      0
      >>> add_integer(-2147483648, 2147483647)
      -1


One item
========
input one item

      >>> add_integer(2)
      100

No item
=======
inout no item

      >>> add_integer(None)
      Traceback (most recent call last):
      TypeError: a must be an integer


Different type
==============


	  >>> add_integer(4, "School")
	  Traceback (most recent call last):
	  ...
	  TypeError: b must be an integer

	  >>> add_integer("School", 4)
	  Traceback (most recent call last):
	  ...
	  TypeError: a must be an integer

	  >>> add_integer("Holberton", "School")
	  Traceback (most recent call last):
	  ...
	  TypeError: a must be an integer

	  >>> add_integer([1, 2, 3], 4)
	  Traceback (most recent call last):
	  ...
	  TypeError: a must be an integer

	  >>> add_integer((1, 2, 3), 4)
	  Traceback (most recent call last):
	  ...
	  TypeError: a must be an integer

